{"version":3,"sources":["use-swr-collection-group.ts"],"names":["useExperimentalCollectionGroup","collection","query","swrOptions","isCollectionGroup"],"mappings":"wRACA,sD,yyBAYO,GAAMA,CAAAA,8BAA8B,CAAG,QAAjCA,CAAAA,8BAAiC,CAI5CC,UAJ4C,CAK5CC,KAL4C,CAM5CC,UAN4C,CAOzC,CACH,MAAO,oCACLF,UADK,kBAGAC,KAHA,EAIHE,iBAAiB,CAAE,IAJhB,GAMLD,UANK,CAAP,CAQD,CAhBM,C","sourcesContent":["import { Document } from '../types'\nimport {\n  CollectionQueryType,\n  CollectionSWROptions,\n  useCollection,\n} from './use-swr-collection'\n\n// type UseCollection = Parameters<typeof useCollection>\n\n/**\n *\n * ðŸš¨ Experimental. I recommend only using this only to test for now. There are some edge cases still being figured out for caching collection groups.\n */\nexport const useExperimentalCollectionGroup = <\n  Data extends object = {},\n  Doc extends Document = Document<Data>\n>(\n  collection: string | null,\n  query: Omit<CollectionQueryType<Data>, 'isCollectionGroup'>,\n  swrOptions: CollectionSWROptions<Doc>\n) => {\n  return useCollection<Data>(\n    collection,\n    {\n      ...query,\n      isCollectionGroup: true,\n    },\n    swrOptions as any\n  )\n}\n"]}