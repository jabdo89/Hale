{"ast":null,"code":"var _jsxFileName = \"/Users/jorgeabdo/Desktop/Hale/admin/src/redux/index.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport firebase from 'firebase';\nimport { Provider, useSelector } from 'react-redux';\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport thunk from 'redux-thunk';\nimport { ReactReduxFirebaseProvider, getFirestore, getFirebase, isLoaded } from 'react-redux-firebase';\nimport { createFirestoreInstance } from 'redux-firestore';\nimport allReducers from './Reducers/allReducers';\nimport { firebaseConfig, rrfConfig } from './config';\n\nfunction AuthIsLoaded({\n  children\n}) {\n  const auth = useSelector(state => state.firebase.auth);\n  if (!isLoaded(auth)) return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 31\n    }\n  });\n  return children;\n}\n\nconst middlewares = [thunk.withExtraArgument(getFirebase, getFirestore)];\nconst store = createStore(allReducers, compose(applyMiddleware(...middlewares)));\nfirebase.initializeApp(firebaseConfig);\nfirebase.firestore();\nconst rrfProps = {\n  firebase,\n  config: rrfConfig,\n  dispatch: store.dispatch,\n  createFirestoreInstance\n};\n\nconst ReduxWrapper = ({\n  children\n}) => /*#__PURE__*/React.createElement(Provider, {\n  store: store,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 3\n  }\n}, /*#__PURE__*/React.createElement(ReactReduxFirebaseProvider, Object.assign({}, rrfProps, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }\n}), /*#__PURE__*/React.createElement(AuthIsLoaded, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 7\n  }\n}, children)));\n\nReduxWrapper.propTypes = {\n  children: PropTypes.any.isRequired\n};\nexport default ReduxWrapper;","map":{"version":3,"sources":["/Users/jorgeabdo/Desktop/Hale/admin/src/redux/index.js"],"names":["React","PropTypes","firebase","Provider","useSelector","createStore","applyMiddleware","compose","thunk","ReactReduxFirebaseProvider","getFirestore","getFirebase","isLoaded","createFirestoreInstance","allReducers","firebaseConfig","rrfConfig","AuthIsLoaded","children","auth","state","middlewares","withExtraArgument","store","initializeApp","firestore","rrfProps","config","dispatch","ReduxWrapper","propTypes","any","isRequired"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,QAAP,MAAqB,UAArB;AACA,SAASC,QAAT,EAAmBC,WAAnB,QAAsC,aAAtC;AACA,SAASC,WAAT,EAAsBC,eAAtB,EAAuCC,OAAvC,QAAsD,OAAtD;AACA,OAAOC,KAAP,MAAkB,aAAlB;AACA,SACEC,0BADF,EAEEC,YAFF,EAGEC,WAHF,EAIEC,QAJF,QAKO,sBALP;AAMA,SAASC,uBAAT,QAAwC,iBAAxC;AACA,OAAOC,WAAP,MAAwB,wBAAxB;AACA,SAASC,cAAT,EAAyBC,SAAzB,QAA0C,UAA1C;;AAEA,SAASC,YAAT,CAAsB;AAAEC,EAAAA;AAAF,CAAtB,EAAoC;AAClC,QAAMC,IAAI,GAAGf,WAAW,CAACgB,KAAK,IAAIA,KAAK,CAAClB,QAAN,CAAeiB,IAAzB,CAAxB;AACA,MAAI,CAACP,QAAQ,CAACO,IAAD,CAAb,EAAqB,oBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAP;AACrB,SAAOD,QAAP;AACD;;AAED,MAAMG,WAAW,GAAG,CAACb,KAAK,CAACc,iBAAN,CAAwBX,WAAxB,EAAqCD,YAArC,CAAD,CAApB;AAEA,MAAMa,KAAK,GAAGlB,WAAW,CAACS,WAAD,EAAcP,OAAO,CAACD,eAAe,CAAC,GAAGe,WAAJ,CAAhB,CAArB,CAAzB;AAEAnB,QAAQ,CAACsB,aAAT,CAAuBT,cAAvB;AACAb,QAAQ,CAACuB,SAAT;AAEA,MAAMC,QAAQ,GAAG;AACfxB,EAAAA,QADe;AAEfyB,EAAAA,MAAM,EAAEX,SAFO;AAGfY,EAAAA,QAAQ,EAAEL,KAAK,CAACK,QAHD;AAIff,EAAAA;AAJe,CAAjB;;AAOA,MAAMgB,YAAY,GAAG,CAAC;AAAEX,EAAAA;AAAF,CAAD,kBACnB,oBAAC,QAAD;AAAU,EAAA,KAAK,EAAEK,KAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBACE,oBAAC,0BAAD,oBAAgCG,QAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBACE,oBAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAeR,QAAf,CADF,CADF,CADF;;AAQAW,YAAY,CAACC,SAAb,GAAyB;AACvBZ,EAAAA,QAAQ,EAAEjB,SAAS,CAAC8B,GAAV,CAAcC;AADD,CAAzB;AAIA,eAAeH,YAAf","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport firebase from 'firebase';\r\nimport { Provider, useSelector } from 'react-redux';\r\nimport { createStore, applyMiddleware, compose } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport {\r\n  ReactReduxFirebaseProvider,\r\n  getFirestore,\r\n  getFirebase,\r\n  isLoaded\r\n} from 'react-redux-firebase';\r\nimport { createFirestoreInstance } from 'redux-firestore';\r\nimport allReducers from './Reducers/allReducers';\r\nimport { firebaseConfig, rrfConfig } from './config';\r\n\r\nfunction AuthIsLoaded({ children }) {\r\n  const auth = useSelector(state => state.firebase.auth);\r\n  if (!isLoaded(auth)) return <div></div>;\r\n  return children;\r\n}\r\n\r\nconst middlewares = [thunk.withExtraArgument(getFirebase, getFirestore)];\r\n\r\nconst store = createStore(allReducers, compose(applyMiddleware(...middlewares)));\r\n\r\nfirebase.initializeApp(firebaseConfig);\r\nfirebase.firestore();\r\n\r\nconst rrfProps = {\r\n  firebase,\r\n  config: rrfConfig,\r\n  dispatch: store.dispatch,\r\n  createFirestoreInstance\r\n};\r\n\r\nconst ReduxWrapper = ({ children }) => (\r\n  <Provider store={store}>\r\n    <ReactReduxFirebaseProvider {...rrfProps}>\r\n      <AuthIsLoaded>{children}</AuthIsLoaded>\r\n    </ReactReduxFirebaseProvider>\r\n  </Provider>\r\n);\r\n\r\nReduxWrapper.propTypes = {\r\n  children: PropTypes.any.isRequired\r\n};\r\n\r\nexport default ReduxWrapper;\r\n"]},"metadata":{},"sourceType":"module"}