{"version":3,"sources":["pages/other/postCheckout.js"],"names":["compose","connect","state","ownProps","id","match","params","console","log","Orders","firestore","data","cartItems","items","currency","currencyData","dispatch","addToCart","item","addToast","quantityCount","decreaseQuantity","deleteFromCart","deleteAllFromCart","firestoreConnect","collection","location","useState","pathname","useToasts","name","content","to","process","headerTop","className","length","map","cartItem","key","discountedPrice","getDiscountPrice","price","discount","finalProductPrice","currencyRate","toFixed","finalDiscountedPrice","quantity","src","image","alt","selectedProductColor","selectedProductSize","currencySymbol"],"mappings":"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","file":"static/js/25.f6fe0f26.chunk.js","sourcesContent":["import PropTypes from \"prop-types\";\nimport React, { Fragment, useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { useToasts } from \"react-toast-notifications\";\nimport MetaTags from \"react-meta-tags\";\nimport { firestoreConnect } from \"react-redux-firebase\";\nimport { compose } from \"redux\";\nimport { BreadcrumbsItem } from \"react-breadcrumbs-dynamic\";\nimport { connect } from \"react-redux\";\nimport { getDiscountPrice } from \"../../helpers/product\";\nimport {\n  addToCart,\n  decreaseQuantity,\n  deleteFromCart,\n  cartItemStock,\n  deleteAllFromCart,\n} from \"../../redux/actions/cartActions\";\nimport LayoutOne from \"../../layouts/LayoutOne\";\nimport Breadcrumb from \"../../wrappers/breadcrumb/Breadcrumb\";\n\nconst PostCheckout = ({\n  location,\n  cartItems,\n  currency,\n  decreaseQuantity,\n  addToCart,\n  deleteFromCart,\n  deleteAllFromCart,\n}) => {\n  const [quantityCount] = useState(1);\n  const { addToast } = useToasts();\n  const { pathname } = location;\n  let cartTotalPrice = 0;\n  console.log(cartItems);\n  return (\n    <Fragment>\n      <MetaTags>\n        <title>Sauco | Cart</title>\n        <meta\n          name=\"description\"\n          content=\"Cart page of flone react minimalist eCommerce template.\"\n        />\n      </MetaTags>\n\n      <BreadcrumbsItem to={process.env.PUBLIC_URL + \"/\"}>Home</BreadcrumbsItem>\n      <BreadcrumbsItem to={process.env.PUBLIC_URL + pathname}>\n        Post CheckOut\n      </BreadcrumbsItem>\n\n      <LayoutOne headerTop=\"visible\">\n        {/* breadcrumb */}\n        <Breadcrumb />\n        <div className=\"cart-main-area pt-90 pb-100\">\n          <div className=\"container\">\n            {cartItems && cartItems.length >= 1 ? (\n              <Fragment>\n                <h3 className=\"cart-page-title\">Your Order Will Arrive Soon</h3>\n                <div className=\"row\">\n                  <div className=\"col-12\">\n                    <div className=\"table-content table-responsive cart-table-content\">\n                      <table>\n                        <thead>\n                          <tr>\n                            <th>Image</th>\n                            <th>Product Name</th>\n                            <th>Unit Price</th>\n                            <th>Qty</th>\n                            <th>Subtotal</th>\n                          </tr>\n                        </thead>\n                        <tbody>\n                          {cartItems.map((cartItem, key) => {\n                            const discountedPrice = getDiscountPrice(\n                              cartItem.price,\n                              cartItem.discount\n                            );\n                            const finalProductPrice = (\n                              cartItem.price * currency.currencyRate\n                            ).toFixed(2);\n                            const finalDiscountedPrice = (\n                              discountedPrice * currency.currencyRate\n                            ).toFixed(2);\n\n                            discountedPrice != null\n                              ? (cartTotalPrice +=\n                                  finalDiscountedPrice * cartItem.quantity)\n                              : (cartTotalPrice +=\n                                  finalProductPrice * cartItem.quantity);\n                            return (\n                              <tr key={key}>\n                                <td className=\"product-thumbnail\">\n                                  <Link\n                                    to={\n                                      process.env.PUBLIC_URL +\n                                      \"/product/\" +\n                                      cartItem.id\n                                    }\n                                  >\n                                    <img\n                                      className=\"img-fluid\"\n                                      src={\n                                        process.env.PUBLIC_URL +\n                                        cartItem.image[0]\n                                      }\n                                      alt=\"\"\n                                    />\n                                  </Link>\n                                </td>\n\n                                <td className=\"product-name\">\n                                  <Link\n                                    to={\n                                      process.env.PUBLIC_URL +\n                                      \"/product/\" +\n                                      cartItem.id\n                                    }\n                                  >\n                                    {cartItem.name}\n                                  </Link>\n                                  {cartItem.selectedProductColor &&\n                                  cartItem.selectedProductSize ? (\n                                    <div className=\"cart-item-variation\">\n                                      <span>\n                                        Color: {cartItem.selectedProductColor}\n                                      </span>\n                                      <span>\n                                        Size: {cartItem.selectedProductSize}\n                                      </span>\n                                    </div>\n                                  ) : (\n                                    \"\"\n                                  )}\n                                </td>\n\n                                <td className=\"product-price-cart\">\n                                  {discountedPrice !== null ? (\n                                    <Fragment>\n                                      <span className=\"amount old\">\n                                        {currency.currencySymbol +\n                                          finalProductPrice}\n                                      </span>\n                                      <span className=\"amount\">\n                                        {currency.currencySymbol +\n                                          finalDiscountedPrice}\n                                      </span>\n                                    </Fragment>\n                                  ) : (\n                                    <span className=\"amount\">\n                                      {currency.currencySymbol +\n                                        finalProductPrice}\n                                    </span>\n                                  )}\n                                </td>\n\n                                <td className=\"product-quantity\">\n                                  {cartItem.quantity}\n                                </td>\n                                <td className=\"product-subtotal\">\n                                  {discountedPrice !== null\n                                    ? currency.currencySymbol +\n                                      (\n                                        finalDiscountedPrice * cartItem.quantity\n                                      ).toFixed(2)\n                                    : currency.currencySymbol +\n                                      (\n                                        finalProductPrice * cartItem.quantity\n                                      ).toFixed(2)}\n                                </td>\n                              </tr>\n                            );\n                          })}\n                        </tbody>\n                      </table>\n                    </div>\n                  </div>\n                </div>\n              </Fragment>\n            ) : (\n              <div className=\"row\">\n                <div className=\"col-lg-12\">\n                  <div className=\"item-empty-area text-center\">\n                    <div className=\"item-empty-area__icon mb-30\">\n                      <i className=\"pe-7s-cart\"></i>\n                    </div>\n                    <div className=\"item-empty-area__text\">\n                      No items found in cart <br />{\" \"}\n                      <Link to={process.env.PUBLIC_URL + \"/shop-grid-standard\"}>\n                        Shop Now\n                      </Link>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            )}\n          </div>\n        </div>\n      </LayoutOne>\n    </Fragment>\n  );\n};\n\nPostCheckout.propTypes = {\n  addToCart: PropTypes.func,\n  cartItems: PropTypes.array,\n  currency: PropTypes.object,\n  decreaseQuantity: PropTypes.func,\n  location: PropTypes.object,\n  deleteAllFromCart: PropTypes.func,\n  deleteFromCart: PropTypes.func,\n};\n\nconst mapStateToProps = (state, ownProps) => {\n  const id = ownProps.match.params.id;\n  console.log(id);\n  const Orders = state.firestore.data.Orders;\n  console.log(Orders);\n  const cartItems = Orders[id] ? Orders[id].items : null;\n  return {\n    cartItems: cartItems,\n    currency: state.currencyData,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    addToCart: (item, addToast, quantityCount) => {\n      dispatch(addToCart(item, addToast, quantityCount));\n    },\n    decreaseQuantity: (item, addToast) => {\n      dispatch(decreaseQuantity(item, addToast));\n    },\n    deleteFromCart: (item, addToast) => {\n      dispatch(deleteFromCart(item, addToast));\n    },\n    deleteAllFromCart: (addToast) => {\n      dispatch(deleteAllFromCart(addToast));\n    },\n  };\n};\n\nexport default compose(\n  connect(mapStateToProps, mapDispatchToProps),\n  firestoreConnect([{ collection: \"Orders\" }])\n)(PostCheckout);\n"],"sourceRoot":""}